@page "/admin/training/assigntraining"
@inject IHRMSService hrms
@inject ITrainingService trainingService

@*<TitleComponent Title="Click on selection criteria below" />*@
<Row>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <Card Background="Background.Success" @onclick="GetAllStaff">
                    <Tooltip Text="All Staff">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>All Staff</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
            <div class="col-md-4">
                <Card Background="Background.Danger" @onclick="GetAllDepartments">
                    <Tooltip Text="By Department">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Department</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
            <div class="col-md-4">
                <Card Background="Background.Secondary" @onclick="GetGrades">
                    <Tooltip Text="By Grade">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Grade</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
        
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <Card Background="Background.Info" @onclick="GetGroups">
                    <Tooltip Text="By Group">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Group</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
            <div class="col-md-4">
                <Card Background="Background.Info" @onclick="GetJobTitles">
                    <Tooltip Text="By Job Title">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Job Title</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
            <div class="col-md-4">
                <Card Background="Background.Info">
                    <Tooltip Text="By Employee ID">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Employee ID</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
        </div>
    </div>
</Row>
<Divider />
<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <TitleComponent Title="Criteria" />
        @if(departments.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <ListGroup>
                    @foreach(var d in departments)
                    {
                        <div draggable="true" @ondragstart="@OnDragStart" @ondrag="@Drag" @ondrop="@Drop">
                            <ListGroupItem Name="@d.Name">@d.Name</ListGroupItem>
                        </div>
                    }
                </ListGroup>
            </Alert>
        }

        @if(employees.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <Table Striped="true" Hoverable="true" Bordered="true" Responsive="true">
                    <TableHeader>
                        <TableRow>
                            <TableRowCell>#</TableRowCell>
                            <TableRowCell>LastName</TableRowCell>
                            <TableRowCell>Other names</TableRowCell>
                        </TableRow>
                    </TableHeader>

                    <TableBody>
                        @foreach(var e in employees)
                        {
                            <TableRow>
                                <TableRowCell>
                                    <input type="checkbox" checked=@Checked @onchange="eventArgs => { OnRememberEmpChanged(e, eventArgs.Value); }" />
                                </TableRowCell>
                                <TableRowCell>@e.LastName</TableRowCell>
                                <TableRowCell>@e.FirstName.Trim() @e.OtherNames.Trim()</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </Alert>
        }

        @if(grades.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <Table Striped="true" Hoverable="true" Bordered="true" Responsive="true">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>#</TableHeaderCell>
                            <TableHeaderCell>GradeLetter</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach(var gd in grades){
                            <TableRow>
                                <TableRowCell>
                                    <input type="checkbox" checked=@Checked @onchange="eventArgs => { OnRememberGradeChanged(gd, eventArgs.Value); }" />
                                </TableRowCell>
                                <TableRowCell>@gd.Letter</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </Alert>
        }

        @if(groups.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <Table Striped="true" Hoverable="true" Bordered="true" Responsive="true">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>#</TableHeaderCell>
                            <TableHeaderCell>Group Name</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach(var gr in groups)
                        {
                            <TableRow>
                                <TableRowCell>
                                    <input type="checkbox" checked=@Checked @onchange="eventArgs => { OnRememberGroupChanged(gr, eventArgs.Value); }" />
                                </TableRowCell>
                                <TableRowCell>@gr.Name</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </Alert>
        }

        @if(jobTitles.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <Table Striped="true" Hoverable="true" Bordered="true" Responsive="true">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell></TableHeaderCell>
                            <TableHeaderCell>Job Title</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach(var jt in jobTitles)
                        {
                            <TableRowCell>
                                <input type="checkbox" checked=@Checked @onchange="eventArgs => { OnRememberJobTitleChanged(jt, eventArgs.Value); }" />
                            </TableRowCell>
                            <TableRowCell>@jt.Name</TableRowCell>
                        }
                    </TableBody>
                </Table>
            </Alert>
        }
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <TitleComponent Title="Open Trainings" />
        <Alert Color="Color.Primary" Visible>
            @if(trainings.Count() > 0)
            {
                <div ondragover="event.preventDefault()" @ondrop="(e => OnDropTarget(e))">
                <Table Striped="true" Hoverable="true" Responsive="true">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>#</TableHeaderCell>
                            <TableHeaderCell>Name</TableHeaderCell>
                            <TableHeaderCell>Grouping</TableHeaderCell>
                            <TableHeaderCell>Status</TableHeaderCell>
                        </TableRow>
                    </TableHeader>

                    
                    <TableBody>
                        @foreach(var t in trainings)
                        {
                           
                           <TableRow>
                                <TableRowCell>@t.Id</TableRowCell>
                                <TableRowCell>@t.TrainingName</TableRowCell>
                                <TableRowCell>@t.TrainingGroup.GroupName</TableRowCell>
                                <TableRowCell>@t.TrainingStatus.TrainingTypeStatus</TableRowCell>
                            </TableRow>
                           
                            
                        }
                    </TableBody>
                    
                </Table>
                </div>
            }
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is2">
        <Alert Color="Color.Primary" Visible>
            Is3
        </Alert>
    </Column>
</Row>


@code{
    private List<Department> departments = new List<Department>();
    private Department department = new Department();

    private List<Employee> employees = new List<Employee>();
    private Employee employee = new Employee();

    private List<Grade> grades = new List<Grade>();
    private Grade grade = new Grade();

    private List<Group> groups =new List<Group>();
    private Group group = new Group();

    private List<JobTitle> jobTitles = new List<JobTitle>();
    private JobTitle jobTitle = new JobTitle();

    private List<Training> trainings = new List<Training>();

    bool Checked = false;

    private string msg = string.Empty;
    private string msgTraining = string.Empty;

    private int rowIndex = 0;

    void OnDropTarget(DragEventArgs dragEventArgs)
    {

        var _files = dragEventArgs.DataTransfer.Files[0];
        var items = string.Empty;


    }
    void OnDragStart()
    {

    }
    void Drag(DragEventArgs e)
    {

    }
    void Drop()
    {
        
    }
    protected override async Task OnInitializedAsync()
    {
        trainings = await GetTrainings();
        await base.OnInitializedAsync();
    }

    private async Task<List<Training>> GetTrainings()
    {
        return await trainingService.GetTrainingsAsync();
    }

    private async Task GetAllDepartments()
    {
        try
        {
            departments = await hrms.GetDepartmentsAsync();
            if (departments.Count() > 0){
                employees.Clear();
                grades.Clear();
                groups.Clear();
                jobTitles.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    private async Task GetAllStaff()
    {
        try
        {
            employees = await hrms.GetEmployeeAsync();
            if (employees.Count() > 0)
            {
                //clear the other lists and place the employee control in their place
                departments.Clear();
                grades.Clear();
                groups.Clear();
                jobTitles.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    private async Task GetGrades()
    {
        try
        {
            grades = await hrms.GetGradeAsync();
            if (grades.Count() > 0)
            {
                departments.Clear();
                employees.Clear();
                groups.Clear();
                jobTitles.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    private async Task GetGroups()
    {
        try
        {
            groups = await hrms.GetGroupAsync();
            if (groups.Count() > 0)
            {
                departments.Clear();
                employees.Clear();
                grades.Clear();
                jobTitles.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    private async Task GetJobTitles()
    {
        try
        {
            jobTitles = await hrms.GetJobTitlesAsync();
            if (jobTitles.Count() > 0)
            {
                departments.Clear();
                employees.Clear();
                grades.Clear();
                groups.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    Task OnRememberDepChanged(Department selected, object value)
    {
        //rowChecked
        if ((bool)value)
        {
            int _id = selected.DepartmentId;
            var str = selected.Name;
        }

        return Task.CompletedTask;
    }

    Task OnRememberEmpChanged(Employee emp, object value)
    {
        if ((bool)value)
        {

        }
        return Task.CompletedTask;
    }

    Task OnRememberGradeChanged(Grade g, object value){
        if ((bool)value)
        {

        }
        return Task.CompletedTask;
    }

    Task OnRememberGroupChanged(Group g, object value){
        if ((bool)value)
        {

        }
        return Task.CompletedTask;
    }

    Task OnRememberJobTitleChanged(JobTitle jt, object value){
        if ((bool)value)
        {

        }
        return Task.CompletedTask;
    }

    void ClickedMe(EventArgs e)
    {
        int _id = int.Parse(e.ToString());
    }

    #region selectedRowStyling

    private void OnSelectedDepartmentRowStyling(Department department, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }

    private void OnSelectedEmployeeRowStyling(Employee employee, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }

    private void OnSelectedGradeRowStyling(Grade grade, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }

    private void OnSelectedGroupRowStyling(Group group, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }

    private void OnSelectedJobTitleRowStyling(JobTitle jobTitle, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }
    #endregion
}