@page "/admin/training/assigntraining"
@inject IHRMSService hrms
@inject ITrainingService trainingService

@*<TitleComponent Title="Click on selection criteria below" />*@
<Row>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <Card Background="Background.Success" @onclick="GetAllStaff">
                    <Tooltip Text="All Staff">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>All Staff</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
            <div class="col-md-4">
                <Card Background="Background.Danger" @onclick="GetAllDepartments">
                    <Tooltip Text="By Department">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Department</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
            <div class="col-md-4">
                <Card Background="Background.Secondary" @onclick="GetGrades">
                    <Tooltip Text="By Grade">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Grade</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
        
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <Card Background="Background.Info" @onclick="GetGroups">
                    <Tooltip Text="By Group">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Group</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
            <div class="col-md-4">
                <Card Background="Background.Info" @onclick="GetJobTitles">
                    <Tooltip Text="By Job Title">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Job Title</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
            <div class="col-md-4">
                <Card Background="Background.Info">
                    <Tooltip Text="By Employee ID">
                    <CardBody>
                        <CardText>
                            <div class="d-flex align-items-center justify-content-center"><p><em><h6>By Employee ID</h6></em></p></div>
                        </CardText>
                    </CardBody>
                    </Tooltip>
                </Card>
            </div>
        </div>
    </div>
</Row>
<Divider />
<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <TitleComponent Title="Criteria" />
        @if(departments.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <DataGrid TItem="Department" Data="@departments"
                @bind-SelectedRow="@department" 
                Responsive 
                Hoverable = "true"
                Striped = "true"
                Narrow = "true"
                Bordered="true"
                
                SelectedRowStyling="@OnSelectedDepartmentRowStyling"
                Virtualize 
                VirtualizeOptions="@(new() { DataGridHeight = "700px"})">
                    <DataGridCommandColumn TItem="Department" />
                    <DataGridColumn TItem="Department" Field="@nameof(Department.DepartmentId)" Caption="#" Sortable="false" />
                    <DataGridColumn TItem="Department" Field="@nameof(Department.Name)" Caption="Department" Sortable="false" />
                </DataGrid>
            </Alert>
        }

        @if(employees.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <DataGrid TItem="Employee" Data="@employees"
                @bind-SelectedRow="@employee" 
                Responsive 
                Hoverable = "true"
                Striped = "true"
                Narrow = "true"
                Bordered="true"
                
                SelectedRowStyling="@OnSelectedEmployeeRowStyling"
                Virtualize 
                VirtualizeOptions="@(new() { DataGridHeight = "700px"})">
                    <DataGridCommandColumn TItem="Employee" />
                    <DataGridColumn TItem="Employee" Field="@nameof(Employee.EmployeeId)" Caption="#" Sortable="false" />
                    <DataGridColumn TItem="Employee" Field="@nameof(Employee.FirstName)" Caption="FirstName" Sortable="false" />
                    <DataGridColumn TItem="Employee" Field="@nameof(Employee.LastName)" Caption="LastName" Sortable="false" />
                </DataGrid>
            </Alert>
        }

        @if(grades.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <DataGrid TItem="Grade" Data="@grades"
                @bind-SelectedRow="@grade" 
                Responsive 
                Hoverable = "true"
                Striped = "true"
                Narrow = "true"
                Bordered="true"
                
                SelectedRowStyling="@OnSelectedGradeRowStyling"
                Virtualize 
                VirtualizeOptions="@(new() { DataGridHeight = "700px"})">
                    <DataGridCommandColumn TItem="Grade" />
                    <DataGridColumn TItem="Grade" Field="@nameof(Grade.GradeId)" Caption="#" Sortable="false" />
                    <DataGridColumn TItem="Grade" Field="@nameof(Grade.Letter)" Caption="GradeLetter" Sortable="false" />
                </DataGrid>
            </Alert>
        }

        @if(groups.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <DataGrid TItem="Group" Data="@groups"
                @bind-SelectedRow="@group" 
                Responsive 
                Hoverable = "true"
                Striped = "true"
                Narrow = "true"
                Bordered="true"
                
                SelectedRowStyling="@OnSelectedGroupRowStyling"
                Virtualize 
                VirtualizeOptions="@(new() { DataGridHeight = "700px"})">
                    <DataGridCommandColumn TItem="Group" />
                    <DataGridColumn TItem="Group" Field="@nameof(Group.GroupId)" Caption="#" Sortable="false" />
                    <DataGridColumn TItem="Group" Field="@nameof(Group.Name)" Caption="Group Name" Sortable="false" />
                </DataGrid>
            </Alert>
        }

        @if(jobTitles.Count() > 0)
        {
            <Alert Color="Color.Primary" Visible="true">
                <DataGrid TItem="JobTitle" Data="@jobTitles"
                @bind-SelectedRow="@jobTitle" 
                Responsive 
                Hoverable = "true"
                Striped = "true"
                Narrow = "true"
                Bordered="true"
                
                SelectedRowStyling="@OnSelectedJobTitleRowStyling"
                Virtualize 
                VirtualizeOptions="@(new() { DataGridHeight = "400px"})">
                    <DataGridCommandColumn TItem="JobTitle" />
                    <DataGridColumn TItem="Group" Field="@nameof(JobTitle.Name)" Caption="Job Title" Sortable="false" />
                </DataGrid>
            </Alert>
        }
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <TitleComponent Title="Open Trainings" />
        <Alert Color="Color.Primary" Visible>
            @if(trainings.Count() > 0)
            {
                <Table Striped="true" Hoverable="true" Responsive="true">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>#</TableHeaderCell>
                            <TableHeaderCell>Name</TableHeaderCell>
                            <TableHeaderCell>Grouping</TableHeaderCell>
                            <TableHeaderCell>Status</TableHeaderCell>
                        </TableRow>
                    </TableHeader>

                    <TableBody>
                        @foreach(var t in trainings)
                        {
                            <TableRow>
                                <TableRowCell>@t.Id</TableRowCell>
                                <TableRowCell>@t.TrainingName</TableRowCell>
                                <TableRowCell>@t.TrainingGroup.GroupName</TableRowCell>
                                <TableRowCell>@t.TrainingStatus.TrainingTypeStatus</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            }
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is2">
        <Alert Color="Color.Primary" Visible>
            Is3
        </Alert>
    </Column>
</Row>


@code{
    private List<Department> departments = new List<Department>();
    private Department department = new Department();

    private List<Employee> employees = new List<Employee>();
    private Employee employee = new Employee();

    private List<Grade> grades = new List<Grade>();
    private Grade grade = new Grade();

    private List<Group> groups =new List<Group>();
    private Group group = new Group();

    private List<JobTitle> jobTitles = new List<JobTitle>();
    private JobTitle jobTitle = new JobTitle();

    private List<Training> trainings = new List<Training>();

    private bool rowChecked;
    private string msg = string.Empty;
    private string msgTraining = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        trainings = await GetTrainings();
        await base.OnInitializedAsync();
    }

    private async Task<List<Training>> GetTrainings()
    {
        return await trainingService.GetTrainingsAsync();
    }

    private async Task GetAllDepartments()
    {
        try
        {
            departments = await hrms.GetDepartmentsAsync();
            if (departments.Count() > 0){
                employees.Clear();
                grades.Clear();
                groups.Clear();
                jobTitles.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    private async Task GetAllStaff()
    {
        try
        {
            employees = await hrms.GetEmployeeAsync();
            if (employees.Count() > 0)
            {
                //clear the other lists and place the employee control in their place
                departments.Clear();
                grades.Clear();
                groups.Clear();
                jobTitles.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    private async Task GetGrades()
    {
        try
        {
            grades = await hrms.GetGradeAsync();
            if (grades.Count() > 0)
            {
                departments.Clear();
                employees.Clear();
                groups.Clear();
                jobTitles.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    private async Task GetGroups()
    {
        try
        {
            groups = await hrms.GetGroupAsync();
            if (groups.Count() > 0)
            {
                departments.Clear();
                employees.Clear();
                grades.Clear();
                jobTitles.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    private async Task GetJobTitles()
    {
        try
        {
            jobTitles = await hrms.GetJobTitlesAsync();
            if (jobTitles.Count() > 0)
            {
                departments.Clear();
                employees.Clear();
                grades.Clear();
                groups.Clear();
            }
        }
        catch(Exception x)
        {

        }
    }

    void OnRememberMeChanged(ChangeEventArgs e)
    {
        //rowChecked
        int _id = department.DepartmentId;
        var str = e.Value;
    }

    void ClickedMe(EventArgs e)
    {
        int _id = int.Parse(e.ToString());
    }

    #region selectedRowStyling

    private void OnSelectedDepartmentRowStyling(Department department, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }

    private void OnSelectedEmployeeRowStyling(Employee employee, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }

    private void OnSelectedGradeRowStyling(Grade grade, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }

    private void OnSelectedGroupRowStyling(Group group, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }

    private void OnSelectedJobTitleRowStyling(JobTitle jobTitle, DataGridRowStyling styling)
    {
        styling.Background = Background.Success;
    }
    #endregion
}