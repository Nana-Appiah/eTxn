@page "/student/studentdashboard"
@layout QuestionLayout

@inject IQAllotedService qservice

@if(questions == null)
{
    <div class="spinner">Loading...</div>
}
else
{


    <div class="col-md-8">
        <div class="card-body">
            @if(count > 0)
            {
                <h3 class="card-title">Assessment @count</h3>
                <p class="card-text">
                    @if (blnInitiated)
                    {
                        @currentQuestion.Question
                    }
                </p>
                <p class="card-text">
                    <small>Skills: CSS, Javascript, bootstrap, React</small>
                    <small>Objectives in the form of unordered list comes here</small>
                </p>
            }
       </div>
    </div>
    <style>
        .mybtn-right{
            text-align:right;
        }
        .mybtn-left{
            text-align: left;
        }
    </style>
    <div class="row">
        <div class="col-md-6 mybtn-left">
            <button type="button" class="btn btn-primary" onclick="@startTest">Start Test</button>
        </div>
        <div class="col-md-6 mybtn-right">
            <button type="button" class="btn btn-primary" onclick="@nextQuestion">Next Question</button>
        </div>
    </div>

}

@code{
    private List<AssessmentQuestionPool> questions;
    private AssessmentQuestionPool currentQuestion;
    private bool blnInitiated = false;
    private int questionIndex = 0;
    private int count;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        questions = await GetQuestions();
        StateHasChanged();
    }

    private async Task<List<AssessmentQuestionPool>> GetQuestions()
    {
        var qalloted =  await qservice.GetSelectedQuestions(3, 1);
        return await qservice.getRandomQuestions(qalloted);
    }

    void startTest(EventArgs e)
    {
        if (!blnInitiated)
        {
            blnInitiated = true;
            currentQuestion = questions[questionIndex];
            count = questionIndex + 1;
            StateHasChanged();
        }
    }

    void nextQuestion(EventArgs e)
    {
        int k = questions.Count();
        if (!blnInitiated)
        {
            questionIndex = 0;
        }
        else
        {
            questionIndex += 1;
        }

        if (questionIndex < (questions.Count()))
        {
            currentQuestion = questions[questionIndex];

            count = questionIndex + 1;
            StateHasChanged();
        }  
    }

}
