@inject ITrainingResourceService tResource
@using PETAS.Models.Domain

@if(resourceList.Count() == 0)
{
    <div class="spinner">Loading...</div>
}
else
{
    <Table Striped="true" Hoverable="true" Bordered="true">
            
        <TableHeader>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>Resource Name</TableHeaderCell>
            <TableHeaderCell>Resource Type</TableHeaderCell>
            <TableHeaderCell>Created</TableHeaderCell>
            <TableHeaderCell>Preview</TableHeaderCell>
        </TableHeader>

        <TableBody>
            @foreach(var resource in resourceList)
            {
                <TableRow>
                    <TableRowCell>@resource.Id.ToString()</TableRowCell>
                    <TableRowCell>@resource.ResourceName.Trim()</TableRowCell>
                    <TableRowCell>@resource.TrainingResourceNavigation.TrainingResourceExt.Trim()</TableRowCell>
                    <TableRowCell>@Convert.ToDateTime(@resource.CreatedDate).ToString("dd-MMM-yyyy")</TableRowCell>
                    <TableRowCell><Button Color="Color.Primary" Clicked="@(()=>ShowPreview(@resource))">Priview</Button></TableRowCell>
                </TableRow>
            }
        </TableBody>

    </Table>

    <Modal @ref="modalRef">
        <ModalContent Centered Size="ModalSize.ExtraLarge">
            <ModalHeader>
                <ModalTitle>@PDFTitle</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <embed src="@DisplayPDF" width=1100 height=800 visible="false" />
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

}
@code{
    private List<TrainingResource> resourceList = new List<TrainingResource>();
    private TrainingResource selectedID;
    private Modal modalRef;

    private string DisplayPDF { get; set; } = string.Empty;
    private string PDFTitle { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        resourceList = await GetDataAsync();
        base.OnInitializedAsync();
    }

    private async Task<List<TrainingResource>> GetDataAsync()
    {
        return await tResource.GetTrainingResourcesAsync();
    }

    private async Task ShowPreview(TrainingResource selected)
    {
        //display modal..show PDF form
        PDFTitle = selected.ResourceName.Trim();
        DisplayPDF = await GetPDF(selected.EmbeddedResource);
        modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task<string> GetPDF(byte[] b)
    {
        var f = "data:application/pdf;base64," + Convert.ToBase64String(b);
        //Response.AppendHeader("content-disposition", "inline; filename=file.pdf");
        //var f = new FileStreamResult(new MemoryStream(b), "application/pdf");
        return f;

    }

}