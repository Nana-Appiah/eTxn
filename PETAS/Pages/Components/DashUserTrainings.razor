@inject ITrainingService trainings
@inject IQAllotedService qservice

@inject Blazored.LocalStorage.ILocalStorageService store

@using PETAS.Classes

@if(pendingTrainings == null)
{
    <div class="spinner">Loading...</div>
}
else
{
    

<div class="card-header">Active Trainings
    @*<div class="btn-actions-pane-right">
        <div role="group" class="btn-group-sm btn-group">
            <button class="active btn btn-focus">Last Week</button>
            <button class="btn btn-focus">All Month</button>
        </div>
    </div>*@
</div>

<div class="table-responsive">
    <table class="align-middle mb-0 table table-borderless table-striped table-hover">
        <thead>
        <tr>
            <th class="text-center">#</th>
            <th>Training</th>
            <th class="text-center">Certification</th>
            <th class="text-center">Period From</th>
            <th class="text-center">Period To</th>
            <th class="text-center">Status</th>
            <th class="text-center">Actions</th>
        </tr>
        </thead>
        <tbody>
                @foreach(var emp in pendingTrainings)
                {
                    <tr>
                        <td class="text-center text-muted">#345</td>
                        <td>
                            <div class="widget-content p-0">
                                <div class="widget-content-wrapper">
                                    <div class="widget-content-left mr-3">
                                        <div class="widget-content-left">
                                            <img width="40" class="rounded-circle" src="assets/images/avatars/4.jpg" alt="">
                                        </div>
                                    </div>
                                    <div class="widget-content-left flex2">
                                        <div class="widget-heading">@emp.TrainingName</div>
                                        <div class="widget-subheading opacity-7">@emp.TrainingGroup.GroupName</div>
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td class="text-center">@emp.TrainingCertification.CertificationName</td>
                        <td class="text-center">@emp.DateFrom</td>
                        <td class="text-center">@emp.DateTo</td>
                        <td class="text-center">
                            <div class="badge badge-warning">@emp.TrainingStatus.TrainingTypeStatus</div>
                        </td>
                        <td class="text-center">
                            <button type="button" id="PopoverCustomT-2" class="btn btn-primary btn-sm">Study</button>
                            <button type="button" id="PopoverCustomT-1" class="btn btn-primary btn-sm" onclick="@ShowTestModal">Take Test</button>
                        </td>
                    </tr>
                }
        </tbody>
    </table>

    <Modal @ref="modalQuestions">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>Assessment</ModalTitle>
            </ModalHeader>
        </ModalContent>
        <ModalBody>
            <Carousel @bind-SelectedSlide="@selectedSlide" Autoplay="false">

            </Carousel>
        </ModalBody>
    </Modal>

</div>

}

@code{

    private List<Training> pendingTrainings;
    private Modal modalQuestions;
    private string selectedSlide;

    protected override async Task OnInitializedAsync()
    {
        //get employee data stored in the browser
        var eData = await store.GetItemAsync<Employee>(Storage.employeeData);
        await base.OnInitializedAsync();
        pendingTrainings = await GetEmployeeAssignedTrainings(eData.EmployeeId);
    }

    private async Task<List<Training>> GetEmployeeAssignedTrainings(int? employeeID)
    {
        List<Training> result = new List<Training>();
        var aList = await trainings.GetAssignedTrainings(employeeID);
        if(aList != null)
        {
            foreach(var item in aList)
            {
                var obj = await trainings.GetTraining(item.TrainingId);
                if ((obj != null) && (obj.TrainingStatusId == 1))
                {
                    result.Add(obj);
                }
            }
        }

        return result;
    }

    private async Task ShowTestModal()
    {
        var questions = await qservice.GetSelectedQuestions(3, 1);
        modalQuestions.Show();
    }

    private Task HideModal()
    {
        return modalQuestions.Hide();
    }

}